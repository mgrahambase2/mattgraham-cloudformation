{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "mattgraham VPC Layer",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the bastion host",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[-_ a-zA-Z0-9]*",
      "ConstraintDescription": "Can contain only alphanumeric characters, spaces, dashes and underscores."
    },
    "DNSDomain": {
      "Description": "DNS domain",
      "Type": "String"
    },
    "StackEnvironmentFqdnPrefix": {
      "Description": "DNS subdomain",
      "Type": "String"
    },
    "DNSSubDomain": {
      "Description": "DNS subdomain",
      "Type": "String"
    },
    "CIDROps": {
      "Description": "CIDR address for Ops team",
      "Type": "String"
    },
    "CIDRWorld": {
      "Description": "CIDR address for general access",
      "Type": "String"
    },
    "NATInstanceType": {
      "Description": "Nat Device EC2 instance type",
      "Type": "String",
      "AllowedValues": [ "t2.micro", "t2.small", "t2.medium" ],
      "ConstraintDescription": "Must be a valid EC2 instance type."
    },
    "VPCSubnetCIDRPrefix": {
      "Description": "CIDR of entire subnet",
      "Type": "String"
    },
    "SubnetCidrPublicA": {
      "Description": "CIDR of Public A subnet",
      "Type": "String"
    },
    "SubnetCidrPublicB": {
      "Description": "CIDR of Public B subnet",
      "Type": "String"
    },
    "DeleteEBSonTerminate": {
      "Description": "Delete EBS Volumes on instance termination",
      "Type": "String",
      "Default": "True",
      "AllowedValues": [
        "True",
        "False"
      ],
      "ConstraintDescription": "True or False"
    },
    "RootDiskSizeGB": {
      "Description": "Root disk size in GB",
      "Type": "String",
      "AllowedPattern": "[0-9]*",
      "Default": "20",
      "ConstraintDescription": "Must be a number greater than 1"
    },
    "NATInstanceAMI": {
      "Description": "NAT EC2 AMI",
      "Type": "String"
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VPCSubnetCIDRPrefix"
        },
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "SubnetPublicA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "SubnetCidrPublicA"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "PublicA"
          }
        ]
      }
    },
    "SubnetPublicB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "SubnetCidrPublicB"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "PublicB"
          }
        ]
      }
    },
    "DHCPOptionSet" : {
      "Type" : "AWS::EC2::DHCPOptions",
      "Properties" : {
        "DomainName" : { "Fn::Join":[ "", [ "int.", { "Ref":"DNSSubDomain" }, ".", { "Ref":"DNSDomain" }] ]  },
        "DomainNameServers" : [ "AmazonProvidedDNS" ],
        "Tags" : [
          { "Key" : "Application", "Value": { "Ref" : "AWS::StackName" } },
          { "Key" : "Name", "Value": { "Ref" : "DNSSubDomain" } }
        ]
      }
    },
    "DHCPOptionsAssociation" : {
      "Type" : "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "DhcpOptionsId" : {"Ref" : "DHCPOptionSet"}
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "RouteTablePublic": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "RouteTablePrivateA": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "RouteTablePrivateB": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "RouteOutToInternet": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "RouteOutThroughNatA": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTablePrivateA"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "NatServerA"
        }
      }
    },
    "RouteOutThroughNatB": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTablePrivateB"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "NatServerB"
        }
      }
    },
    "SubnetRouteTableAssociationPublicA": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SubnetPublicA"
        },
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        }
      }
    },
    "SubnetRouteTableAssociationPublicB": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SubnetPublicB"
        },
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        }
      }
    },
    "NetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "InboundNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "-1",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutboundNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "101",
        "Protocol": "-1",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "SubnetNetworkAclAssociationPublicA": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SubnetPublicA"
        },
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        }
      }
    },
    "SubnetNetworkAclAssociationPublicB": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SubnetPublicB"
        },
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        }
      }
    },
    "SecurityGroupBase2": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Access Nat by base2 Ops team",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "203.214.66.230/32"
          }
        ],
        "SecurityGroupEgress": []
      }
    },
    "SecurityGroupClient": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Access Nat by Clients Ops team",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "203.174.178.10/32"
          }
        ],
        "SecurityGroupEgress": []
      }
    },
    "SecurityGroupBackplane": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Base Security Group for all instances",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "VPCSubnetCIDRPrefix"
            }
          },
          {
            "IpProtocol": "udp",
            "FromPort": "53",
            "ToPort": "53",
            "CidrIp": {
              "Ref": "VPCSubnetCIDRPrefix"
            }
          }
        ],
        "SecurityGroupEgress": []
      }
    },
    "SecurityGroupInternalNat": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Access Nat internally",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": {
              "Ref": "VPCSubnetCIDRPrefix"
            }
          }
        ],
        "SecurityGroupEgress": []
      }
    },
    "NatRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "*",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "NatInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "NatRole"
          }
        ]
      }
    },
    "NatAWaitHandler": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "NatAWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "NatServerA",
      "Properties": {
        "Handle": {
          "Ref": "NatAWaitHandler"
        },
        "Timeout": "4500"
      }
    },
    "NatBWaitHandler": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "NatBWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "NatServerB",
      "Properties": {
        "Handle": {
          "Ref": "NatBWaitHandler"
        },
        "Timeout": "4500"
      }
    },
    "NetworkInterfaceNatA": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "Nat A network interface",
        "GroupSet": [
          {
            "Ref": "SecurityGroupBase2"
          },
          {
            "Ref": "SecurityGroupClient"
          },
          {
            "Ref": "SecurityGroupBackplane"
          },
          {
            "Ref": "SecurityGroupInternalNat"
          }
        ],
        "SourceDestCheck": "false",
        "SubnetId": {
          "Ref": "SubnetPublicA"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "StackEnvironmentFqdnPrefix"
                  },
                  ".",
                  {
                    "Ref": "DNSSubDomain"
                  },
                  "-NatA"
                ]
              ]
            }
          }
        ]
      }
    },
    "NetworkInterfaceNatB": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "Nat B network interface",
        "GroupSet": [
          {
            "Ref": "SecurityGroupBase2"
          },
          {
            "Ref": "SecurityGroupClient"
          },
          {
            "Ref": "SecurityGroupBackplane"
          },
          {
            "Ref": "SecurityGroupInternalNat"
          }
        ],
        "SourceDestCheck": "false",
        "SubnetId": {
          "Ref": "SubnetPublicB"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "StackEnvironmentFqdnPrefix"
                  },
                  ".",
                  {
                    "Ref": "DNSSubDomain"
                  },
                  "-NatB"
                ]
              ]
            }
          }
        ]
      }
    },
    "NatIPAddressA": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "AssociationNatIPAddressA": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "NatIPAddressA",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "NetworkInterfaceNatA"
        }
      }
    },
    "NatIPAddressB": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "AssociationNatIPAddressB": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "NatIPAddressB",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "NetworkInterfaceNatB"
        }
      }
    },
    "NatServerA": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "NATInstanceType"
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "NetworkInterfaceNatA"
            },
            "DeviceIndex": "0"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "NatInstanceProfile"
        },
        "ImageId": {
          "Ref": "NATInstanceAMI"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "mattgraham.",
                  {
                    "Ref": "DNSSubDomain"
                  },
                  "-nat01"
                ]
              ]
            }
          },
          {
            "Key": "FQDN",
            "Value": {
              "Fn::Join": [
                ".",
                [
                  "nat01.",
                  {
                    "Ref": "DNSSubDomain"
                  },
                  ".aws.",
                  {
                    "Ref": "DNSDomain"
                  }
                ]
              ]
            }
          }
        ],
        "BlockDeviceMappings" : [
          {
            "DeviceName" : "/dev/xvda",
            "Ebs" : { "VolumeSize" : { "Ref" : "RootDiskSizeGB" }, "DeleteOnTermination" : "true"}
          },
          {
            "DeviceName" : "/dev/sdb",
            "Ebs" : { "VolumeSize" : "30", "DeleteOnTermination" : "true"}
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "/usr/sbin/ntpd -q\n",
                "/opt/aws/bin/cfn-init -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " -r NatServerA ",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "hostname nat01.int.",
                {
                  "Ref": "DNSSubDomain"
                },
                ".",
                {
                  "Ref": "DNSDomain"
                },
                "\n",
                "sed '/HOSTNAME/d' /etc/sysconfig/network > /tmp/network && mv /tmp/network /etc/sysconfig/network && echo 'HOSTNAME=nat01.int.",
                {
                  "Ref": "DNSSubDomain"
                },
                ".",
                {
                  "Ref": "DNSDomain"
                },
                "'>>/etc/sysconfig/network && /etc/init.d/network restart\n",
                "\n",
                "echo \"net.ipv4.ip_forward = 1\" >> /etc/sysctl.conf\n",
                "sysctl -p\n",
                "iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n",
                "iptables -A FORWARD -i eth0 -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT\n",
                "iptables -A FORWARD -i eth1 -o eth0 -j ACCEPT\n",
                "iptables-save > /etc/sysconfig/iptables\n",
                "export ENV_PREFIX=",
                {
                  "Ref": "DNSSubDomain"
                },
                "\n",
                "echo \"export ENV_PREFIX=",
                {
                  "Ref": "DNSSubDomain"
                },
                "\" >> /etc/environment\n",
                "\n",
                "export DNS_DOMAIN=", { "Ref" : "DNSDomain"} , "\n",
                "echo \"export DNS_DOMAIN=", { "Ref" : "DNSDomain"} , "\" >> /etc/environment\n",
                "\n",
                "/opt/aws/bin/cfn-signal -e $? '",
                {
                  "Ref": "NatAWaitHandler"
                },
                "'\n"
              ]
            ]
          }
        }
      }
    },
    "NatServerB": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "NATInstanceType"
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "NetworkInterfaceNatB"
            },
            "DeviceIndex": "0"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "NatInstanceProfile"
        },
        "ImageId": {
          "Ref": "NATInstanceAMI"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "mattgraham.",
                  {
                    "Ref": "DNSSubDomain"
                  },
                  "-nat02"
                ]
              ]
            }
          },
          {
            "Key": "FQDN",
            "Value": {
              "Fn::Join": [
                ".",
                [
                  "nat02.",
                  {
                    "Ref": "DNSSubDomain"
                  },
                  ".aws.",
                  {
                    "Ref": "DNSDomain"
                  }
                ]
              ]
            }
          }
        ],
        "BlockDeviceMappings" : [
          {
            "DeviceName" : "/dev/xvda",
            "Ebs" : { "VolumeSize" : { "Ref" : "RootDiskSizeGB" }, "DeleteOnTermination" : "true"}
          },
          {
            "DeviceName" : "/dev/sdb",
            "Ebs" : { "VolumeSize" : "30", "DeleteOnTermination" : "true"}
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "/usr/sbin/ntpd -q\n",
                "/opt/aws/bin/cfn-init -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " -r NatServerB ",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "hostname nat02.int.",
                {
                  "Ref": "DNSSubDomain"
                },
                ".",
                {
                  "Ref": "DNSDomain"
                },
                "\n",
                "sed '/HOSTNAME/d' /etc/sysconfig/network > /tmp/network && mv /tmp/network /etc/sysconfig/network && echo 'HOSTNAME=nat02.int.",
                {
                  "Ref": "DNSSubDomain"
                },
                ".",
                {
                  "Ref": "DNSDomain"
                },
                "'>>/etc/sysconfig/network && /etc/init.d/network restart\n",
                "\n",
                "echo \"net.ipv4.ip_forward = 1\" >> /etc/sysctl.conf\n",
                "sysctl -p\n",
                "iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n",
                "iptables -A FORWARD -i eth0 -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT\n",
                "iptables -A FORWARD -i eth1 -o eth0 -j ACCEPT\n",
                "iptables-save > /etc/sysconfig/iptables\n",
                "export ENV_PREFIX=",
                {
                  "Ref": "DNSSubDomain"
                },
                "\n",
                "echo \"export ENV_PREFIX=",
                {
                  "Ref": "DNSSubDomain"
                },
                "\" >> /etc/environment\n",
                "\n",
                "export DNS_DOMAIN=", { "Ref" : "DNSDomain"} , "\n",
                "echo \"export DNS_DOMAIN=", { "Ref" : "DNSDomain"} , "\" >> /etc/environment\n",
                "\n",
                "/opt/aws/bin/cfn-signal -e $? '",
                {
                  "Ref": "NatBWaitHandler"
                },
                "'\n"
              ]
            ]
          }
        }
      }
    },
    "Nat01EXTHostRecord": {
      "Type": "AWS::Route53::RecordSet",
      "DependsOn": "NatServerA",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": ["",[ {"Ref" : "DNSSubDomain"},".",{"Ref": "DNSDomain"} ,"."]]
        },
        "Comment": "DNS name for my instance.",
        "Name": {
          "Fn::Join": [
            "",
            [
              "nat01.",
              {
                "Ref": "DNSSubDomain"
              },
              ".",
              {
                "Ref": "DNSDomain"
              },
              "."
            ]
          ]
        },
        "Type": "A",
        "TTL": "60",
        "ResourceRecords": [
          {
            "Ref": "NatIPAddressA"
          }
        ]
      }
    },
    "Nat02EXTHostRecord": {
      "Type": "AWS::Route53::RecordSet",
      "DependsOn": "NatServerB",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": ["",[ {"Ref" : "DNSSubDomain"},".",{"Ref": "DNSDomain"} ,"."]]
        },
        "Comment": "DNS name for my instance.",
        "Name": {
          "Fn::Join": [
            "",
            [
              "nat02.",
              {
                "Ref": "DNSSubDomain"
              },
              ".",
              {
                "Ref": "DNSDomain"
              },
              "."
            ]
          ]
        },
        "Type": "A",
        "TTL": "60",
        "ResourceRecords": [
          {
            "Ref": "NatIPAddressB"
          }
        ]
      }
    },
    "Nat01INTHostRecord": {
      "Type": "AWS::Route53::RecordSet",
      "DependsOn": "NatServerA",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": ["",[ {"Ref" : "DNSSubDomain"},".",{"Ref": "DNSDomain"} ,"."]]
        },
        "Comment": "DNS name for my instance.",
        "Name": {
          "Fn::Join": [
            "",
            [
              "nat01.int.",
              {
                "Ref": "DNSSubDomain"
              },
              ".",
              {
                "Ref": "DNSDomain"
              },
              "."
            ]
          ]
        },
        "Type": "A",
        "TTL": "60",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "NatServerA",
              "PrivateIp"
            ]
          }
        ]
      }
    },
    "Nat02INTHostRecord": {
      "Type": "AWS::Route53::RecordSet",
      "DependsOn": "NatServerB",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": ["",[ {"Ref" : "DNSSubDomain"},".",{"Ref": "DNSDomain"} ,"."]]
        },
        "Comment": "DNS name for my instance.",
        "Name": {
          "Fn::Join": [
            "",
            [
              "nat02.int.",
              {
                "Ref": "DNSSubDomain"
              },
              ".",
              {
                "Ref": "DNSDomain"
              },
              "."
            ]
          ]
        },
        "Type": "A",
        "TTL": "60",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "NatServerB",
              "PrivateIp"
            ]
          }
        ]
      }
    }
  },
  "Outputs": {
    "SubnetPublicA": {
      "Description": "SubnetId of the public subnet in AZa",
      "Value": {
        "Ref": "SubnetPublicA"
      }
    },
    "SubnetPublicB": {
      "Description": "SubnetId of the public subnet in AZb",
      "Value": {
        "Ref": "SubnetPublicB"
      }
    },
    "VPCId": {
      "Description": "VPCId of the newly created VPC",
      "Value": {
        "Ref": "VPC"
      }
    },
    "SgBackplane": {
      "Description": "Backplane Security Group",
      "Value": {
        "Ref": "SecurityGroupBackplane"
      }
    },
    "NatServerA": {
      "Description": "Nat Server A Instance ID",
      "Value": {
        "Ref": "NatServerA"
      }
    },
    "NatServerB": {
      "Description": "Nat Server B Instance ID",
      "Value": {
        "Ref": "NatServerB"
      }
    },
    "InternetGateway": {
      "Description": "IGW",
      "Value": {
        "Ref": "InternetGateway"
      }
    },
    "RouteTablePrivateA": {
      "Description": "Route Table Private A",
      "Value": {
        "Ref": "RouteTablePrivateA"
      }
    },
    "RouteTablePrivateB": {
      "Description": "Route Table Private B",
      "Value": {
        "Ref": "RouteTablePrivateB"
      }
    },
    "RouteTablePublic": {
      "Description": "Route Table Public",
      "Value": {
        "Ref": "RouteTablePublic"
      }
    }
  }
}
